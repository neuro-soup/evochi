syntax = "proto3";

package evochi.v1;

import "google/protobuf/timestamp.proto";

message Slice {
  // the start index (inclusive)
  int32 start = 1;

  // the end index (exclusive)
  int32 end = 2;
}

message Evaluation {
  // the evaluated slice
  Slice slice = 1;

  // the rewards for each evaluated slice
  repeated float rewards = 2;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_HELLO = 1;
  EVENT_TYPE_EVALUATE = 3;
  EVENT_TYPE_OPTIMIZE = 4;
  EVENT_TYPE_INITIALIZE = 5;
  EVENT_TYPE_SHARE_STATE = 6;
}

// the server welcomes and initialises the worker
message HelloEvent {
  // the id assigned to the worker
  string id = 1;

  // the token assigned to the worker. now, the worker have to send this token
  // as `Authorization: Bearer <token>` to the server to authenticate itself.
  string token = 2;

  // total population size
  int32 population_size = 3;

  // the heartbeat interval in seconds in which the worker sends heartbeats to
  // the server.
  int32 heartbeat_interval = 4;

  // the initial state of the worker, where the encoding value is up to the
  // workers. if nil, the worker is the first one to join the work force.
  optional bytes state = 5;
}

// the server requests the worker to evaluate a slice
message EvaluateEvent {
  // the id of the evaluation
  string task_id = 1;

  // the current epoch
  int32 epoch = 2;

  // the slices to be evaluated
  repeated Slice slices = 3;
}

// the server requests the worker to optimize its parameters
message OptimizeEvent {
  // the id of the optimization
  string task_id = 1;

  // the current epoch
  int32 epoch = 2;

  // the accumulated rewards in the current epoch
  repeated float rewards = 3;
}

// the server requests the worker to create the initial state and send it to the
// server.
message InitializeEvent {
  // the id of the initialization
  string task_id = 1;
}

// the server requests the worker to share its state with the server
message ShareStateEvent {
  // the id of the state
  string task_id = 1;

  // the current epoch
  int32 epoch = 2;
}

// the client asks the server to join the work force
message SubscribeRequest {
  // number of cores that the worker contributes to the evaluation
  int32 cores = 1;
}

message SubscribeResponse {
  // the type of event
  EventType type = 1;

  // the event data
  oneof event {
    HelloEvent hello = 2;
    EvaluateEvent evaluate = 3;
    OptimizeEvent optimize = 4;
    InitializeEvent initialize = 5;
    ShareStateEvent share_state = 6;
  }
}

// the client sends the server a heartbeat to keep the connection alive
message HeartbeatRequest {
  // the sequence id of the heartbeat
  int32 seq_id = 1;

  // the time when the heartbeat was sent
  google.protobuf.Timestamp timestamp = 2;
}

// the server acknowledges that the heartbeat was received
message HeartbeatResponse {
  // whether the heartbeat was successful
  bool ok = 1;
}

// the client tells the server that the worker has finished the evaluation
message FinishEvaluationRequest {
  // the id of the evaluation
  string task_id = 1;

  // the evaluations for each evaluated slice. the slices must match the slices
  // that were assigned to the task via `EvaluateEvent.slices`.
  repeated Evaluation evaluations = 2;
}

// the server acknowledges that the evaluation has finished
message FinishEvaluationResponse {
  // whether the evaluation was successfully finished
  bool ok = 1;
}

// the client tells the server that the worker has finished the optimization
message FinishOptimizationRequest {
  // the id of the evaluation
  string task_id = 1;
}

// the server acknowledges that the optimization has finished
message FinishOptimizationResponse {
  // whether the optimization was successfully finished
  bool ok = 1;
}

// the client tells the server that the worker has finished its state
// initialization. this request is sent by the first worker who initiates the
// first epoch.
message FinishInitializationRequest {
  // the id of the initialization
  string task_id = 1;

  // the initial state of the worker, where the encoding value is up to the
  // workers
  bytes state = 2;
}

// the server acknowledges that the initialization has finished
message FinishInitializationResponse {
  // whether the initialization was successfully finished
  bool ok = 1;
}

// the client shares its state with the server
message FinishShareStateRequest {
  // the id of the state
  string task_id = 1;

  // the state to share, where the encoding value is up to the workers
  bytes state = 2;
}

message FinishShareStateResponse {
  // whether the state was successfully shared
  bool ok = 1;
}

service EvochiService {
  // join the work force and subscribe to events
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}

  // send heartbeat to the server to keep the connection alive
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // finish the evaluation
  rpc FinishEvaluation(FinishEvaluationRequest) returns (FinishEvaluationResponse) {}

  // finish the optimization
  rpc FinishOptimization(FinishOptimizationRequest) returns (FinishOptimizationResponse) {}

  // finish the initialization
  rpc FinishInitialization(FinishInitializationRequest) returns (FinishInitializationResponse) {}

  // finish the state sharing
  rpc FinishShareState(FinishShareStateRequest) returns (FinishShareStateResponse) {}
}
