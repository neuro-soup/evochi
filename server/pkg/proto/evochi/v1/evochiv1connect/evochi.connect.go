// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: evochi/v1/evochi.proto

package evochiv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/neuro-soup/evochi/server/pkg/proto/evochi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EvochiServiceName is the fully-qualified name of the EvochiService service.
	EvochiServiceName = "evochi.v1.EvochiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvochiServiceSubscribeProcedure is the fully-qualified name of the EvochiService's Subscribe RPC.
	EvochiServiceSubscribeProcedure = "/evochi.v1.EvochiService/Subscribe"
	// EvochiServiceHeartbeatProcedure is the fully-qualified name of the EvochiService's Heartbeat RPC.
	EvochiServiceHeartbeatProcedure = "/evochi.v1.EvochiService/Heartbeat"
	// EvochiServiceFinishEvaluationProcedure is the fully-qualified name of the EvochiService's
	// FinishEvaluation RPC.
	EvochiServiceFinishEvaluationProcedure = "/evochi.v1.EvochiService/FinishEvaluation"
	// EvochiServiceFinishOptimizationProcedure is the fully-qualified name of the EvochiService's
	// FinishOptimization RPC.
	EvochiServiceFinishOptimizationProcedure = "/evochi.v1.EvochiService/FinishOptimization"
)

// EvochiServiceClient is a client for the evochi.v1.EvochiService service.
type EvochiServiceClient interface {
	// join the work force and subscribe to events
	Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest]) (*connect_go.ServerStreamForClient[v1.SubscribeResponse], error)
	// send heartbeat to the server to keep the connection alive
	Heartbeat(context.Context, *connect_go.Request[v1.HeartbeatRequest]) (*connect_go.Response[v1.HeartbeatResponse], error)
	// finish the evaluation
	FinishEvaluation(context.Context, *connect_go.Request[v1.FinishEvaluationRequest]) (*connect_go.Response[v1.FinishEvaluationResponse], error)
	// finish the optimization
	FinishOptimization(context.Context, *connect_go.Request[v1.FinishOptimizationRequest]) (*connect_go.Response[v1.FinishOptimizationResponse], error)
}

// NewEvochiServiceClient constructs a client for the evochi.v1.EvochiService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvochiServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EvochiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evochiServiceClient{
		subscribe: connect_go.NewClient[v1.SubscribeRequest, v1.SubscribeResponse](
			httpClient,
			baseURL+EvochiServiceSubscribeProcedure,
			opts...,
		),
		heartbeat: connect_go.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+EvochiServiceHeartbeatProcedure,
			opts...,
		),
		finishEvaluation: connect_go.NewClient[v1.FinishEvaluationRequest, v1.FinishEvaluationResponse](
			httpClient,
			baseURL+EvochiServiceFinishEvaluationProcedure,
			opts...,
		),
		finishOptimization: connect_go.NewClient[v1.FinishOptimizationRequest, v1.FinishOptimizationResponse](
			httpClient,
			baseURL+EvochiServiceFinishOptimizationProcedure,
			opts...,
		),
	}
}

// evochiServiceClient implements EvochiServiceClient.
type evochiServiceClient struct {
	subscribe          *connect_go.Client[v1.SubscribeRequest, v1.SubscribeResponse]
	heartbeat          *connect_go.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	finishEvaluation   *connect_go.Client[v1.FinishEvaluationRequest, v1.FinishEvaluationResponse]
	finishOptimization *connect_go.Client[v1.FinishOptimizationRequest, v1.FinishOptimizationResponse]
}

// Subscribe calls evochi.v1.EvochiService.Subscribe.
func (c *evochiServiceClient) Subscribe(ctx context.Context, req *connect_go.Request[v1.SubscribeRequest]) (*connect_go.ServerStreamForClient[v1.SubscribeResponse], error) {
	return c.subscribe.CallServerStream(ctx, req)
}

// Heartbeat calls evochi.v1.EvochiService.Heartbeat.
func (c *evochiServiceClient) Heartbeat(ctx context.Context, req *connect_go.Request[v1.HeartbeatRequest]) (*connect_go.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// FinishEvaluation calls evochi.v1.EvochiService.FinishEvaluation.
func (c *evochiServiceClient) FinishEvaluation(ctx context.Context, req *connect_go.Request[v1.FinishEvaluationRequest]) (*connect_go.Response[v1.FinishEvaluationResponse], error) {
	return c.finishEvaluation.CallUnary(ctx, req)
}

// FinishOptimization calls evochi.v1.EvochiService.FinishOptimization.
func (c *evochiServiceClient) FinishOptimization(ctx context.Context, req *connect_go.Request[v1.FinishOptimizationRequest]) (*connect_go.Response[v1.FinishOptimizationResponse], error) {
	return c.finishOptimization.CallUnary(ctx, req)
}

// EvochiServiceHandler is an implementation of the evochi.v1.EvochiService service.
type EvochiServiceHandler interface {
	// join the work force and subscribe to events
	Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest], *connect_go.ServerStream[v1.SubscribeResponse]) error
	// send heartbeat to the server to keep the connection alive
	Heartbeat(context.Context, *connect_go.Request[v1.HeartbeatRequest]) (*connect_go.Response[v1.HeartbeatResponse], error)
	// finish the evaluation
	FinishEvaluation(context.Context, *connect_go.Request[v1.FinishEvaluationRequest]) (*connect_go.Response[v1.FinishEvaluationResponse], error)
	// finish the optimization
	FinishOptimization(context.Context, *connect_go.Request[v1.FinishOptimizationRequest]) (*connect_go.Response[v1.FinishOptimizationResponse], error)
}

// NewEvochiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvochiServiceHandler(svc EvochiServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(EvochiServiceSubscribeProcedure, connect_go.NewServerStreamHandler(
		EvochiServiceSubscribeProcedure,
		svc.Subscribe,
		opts...,
	))
	mux.Handle(EvochiServiceHeartbeatProcedure, connect_go.NewUnaryHandler(
		EvochiServiceHeartbeatProcedure,
		svc.Heartbeat,
		opts...,
	))
	mux.Handle(EvochiServiceFinishEvaluationProcedure, connect_go.NewUnaryHandler(
		EvochiServiceFinishEvaluationProcedure,
		svc.FinishEvaluation,
		opts...,
	))
	mux.Handle(EvochiServiceFinishOptimizationProcedure, connect_go.NewUnaryHandler(
		EvochiServiceFinishOptimizationProcedure,
		svc.FinishOptimization,
		opts...,
	))
	return "/evochi.v1.EvochiService/", mux
}

// UnimplementedEvochiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEvochiServiceHandler struct{}

func (UnimplementedEvochiServiceHandler) Subscribe(context.Context, *connect_go.Request[v1.SubscribeRequest], *connect_go.ServerStream[v1.SubscribeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("evochi.v1.EvochiService.Subscribe is not implemented"))
}

func (UnimplementedEvochiServiceHandler) Heartbeat(context.Context, *connect_go.Request[v1.HeartbeatRequest]) (*connect_go.Response[v1.HeartbeatResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("evochi.v1.EvochiService.Heartbeat is not implemented"))
}

func (UnimplementedEvochiServiceHandler) FinishEvaluation(context.Context, *connect_go.Request[v1.FinishEvaluationRequest]) (*connect_go.Response[v1.FinishEvaluationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("evochi.v1.EvochiService.FinishEvaluation is not implemented"))
}

func (UnimplementedEvochiServiceHandler) FinishOptimization(context.Context, *connect_go.Request[v1.FinishOptimizationRequest]) (*connect_go.Response[v1.FinishOptimizationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("evochi.v1.EvochiService.FinishOptimization is not implemented"))
}
